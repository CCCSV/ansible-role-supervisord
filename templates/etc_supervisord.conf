;
; GENERATED BY:  echo_supervisord_conf > supervisord.conf, then modified
;
; Sample supervisor config file.
;
; For more information on the config file, please see:
; http://supervisord.org/configuration.html
;
; Notes:
;  - Shell expansion ("~" or "$HOME") is not supported.  Environment
;    variables can be expanded using this syntax: "%(ENV_HOME)s".
;  - Comments must have a leading space: "a=b ;comment" not "a=b;comment".

;[unix_http_server]
;file={{ supervisord_unix_file}}  ; (the path to the socket file)
;chmod={{ supervisord_unix_chmod }}                  ; socket file mode (default 0700)
;chown={{ supervisord_unix_chown }}       ; socket file uid:gid owner
;username={{ supervisord_unix_username }}              ; (default is no username (open server))
;password={{ supervisord_unix_password }}               ; (default is no password (open server))

[inet_http_server]          ; inet (TCP) server disabled by default
port={{ supervisord_ihs_server }}         ; (ip_address:port specifier, *:port for all iface)
;username={{ supervisord_ihs_username }}              ; (default is no username (open server))
;password={{ supervisord_ihs_password }}               ; (default is no password (open server))

[supervisord]
logfile={{ supervisord_logfile }} ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes={{ supervisord_logfile_maxbytes }}        ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups={{ supervisord_logfile_backups }}           ; (num of main logfile rotation backups;default 10)
loglevel={{ supervisord_loglevel }}                ; (log level;default info; others: debug,warn,trace)
pidfile={{ supervisord_pidfile }} ; (supervisord pidfile;default supervisord.pid)
nodaemon={{ supervisord_nodaemon }}               ; (start in foreground if true;default false)
minfds={{ supervisord_minfds }}                  ; (min. avail startup file descriptors;default 1024)
minprocs={{ supervisord_minprocs }}                 ; (min. avail process descriptors;default 200)
;umask={{ supervisord_umask }}                    ; (process file creation umask;default 022)
;user={{ supervisord_user }}                 ; (default is current user, required if root)
;identifier={{ supervisord_identifier }}       ; (supervisord identifier, default is 'supervisor')
;directory={{ supervisord_directory }}              ; (default is not to cd during start)
;nocleanup={{ supervisord_nocleanup }}              ; (don't clean up tempfiles at start;default false)
;childlogdir={{ supervisord_childlogdir }}            ; ('AUTO' child log dir, default $TEMP)
;environment={{ supervisord_environment }}     ; (key value pairs to add to environment)
;strip_ansi={{ supervisord_strip_ansi }}            ; (strip ansi escape codes in logs; def. false)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = {{ supervisord_rpcinterface_factory }}

[supervisorctl]
serverurl={{ supervisord_ctl_serverurl }} ; use a unix:// URL  for a unix socket
;username={{ supervisord_ctl_username }}              ; should be same as http_username if set
;password={{ supervisord_ctl_password }}                ; should be same as http_password if set
;prompt={{ supervisord_ctl_prompt }}         ; cmd line prompt (default "supervisor")
;history_file={{ supervisord_ctl_history_file }}  ; use readline history if available

; The below sample program section shows all possible program subsection values,
; create one or more 'real' program: sections to be able to control them under
; supervisor.

;[program:theprogramname]
;command=/bin/cat              ; the program (relative uses PATH, can take args)
;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
;numprocs=1                    ; number of processes copies to start (def 1)
;directory=/tmp                ; directory to cwd to before exec (def no cwd)
;umask=022                     ; umask for process (default None)
;priority=999                  ; the relative start priority (default 999)
;autostart=true                ; start at supervisord start (default: true)
;autorestart=unexpected        ; whether/when to restart (default: unexpected)
;startsecs=1                   ; number of secs prog must stay running (def. 1)
;startretries=3                ; max ; of serial start failures (default 3)
;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)
;stopsignal=QUIT               ; signal used to kill process (default TERM)
;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
;stopasgroup=false             ; send stop signal to the UNIX process group (default false)
;killasgroup=false             ; SIGKILL the UNIX process group (def false)
;user=chrism                   ; setuid to this UNIX account to run the program
;redirect_stderr=true          ; redirect proc stderr to stdout (default false)
;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
;stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
;stdout_events_enabled=false   ; emit events on stdout writes (default false)
;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)
;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;environment=A="1",B="2"       ; process environment additions (def no adds)
;serverurl=AUTO                ; override serverurl computation (childutils)

; The below sample eventlistener section shows all possible
; eventlistener subsection values, create one or more 'real'
; eventlistener: sections to be able to handle event notifications
; sent by supervisor.

;[eventlistener:theeventlistenername]
;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)
;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
;numprocs=1                    ; number of processes copies to start (def 1)
;events=EVENT                  ; event notif. types to subscribe to (req'd)
;buffer_size=10                ; event buffer queue size (default 10)
;directory=/tmp                ; directory to cwd to before exec (def no cwd)
;umask=022                     ; umask for process (default None)
;priority=-1                   ; the relative start priority (default -1)
;autostart=true                ; start at supervisord start (default: true)
;autorestart=unexpected        ; whether/when to restart (default: unexpected)
;startsecs=1                   ; number of secs prog must stay running (def. 1)
;startretries=3                ; max # of serial start failures (default 3)
;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)
;stopsignal=QUIT               ; signal used to kill process (default TERM)
;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
;stopasgroup=false             ; send stop signal to the UNIX process group (default false)
;killasgroup=false             ; SIGKILL the UNIX process group (def false)
;user=chrism                   ; setuid to this UNIX account to run the program
;redirect_stderr=true          ; redirect proc stderr to stdout (default false)
;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
;stdout_events_enabled=false   ; emit events on stdout writes (default false)
;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups        ; # of stderr logfile backups (default 10)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;environment=A="1",B="2"       ; process environment additions
;serverurl=AUTO                ; override serverurl computation (childutils)

; The below sample group section shows all possible group values,
; create one or more 'real' group: sections to create "heterogeneous"
; process groups.

;[group:thegroupname]
;programs=progname1,progname2  ; each refers to 'x' in [program:x] definitions
;priority=999                  ; the relative start priority (default 999)

; The [include] section can just contain the "files" setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

[include]
files = {% for file in supervisord_include_files %}{{ file }}{% endfor %}
